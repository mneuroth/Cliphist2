name: Windows CI

on:
  push:
    branches: [ master ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

jobs:

  create_release:

    name: Prepare release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      if: contains(github.ref, 'release')
      uses: actions/checkout@v3
    - name: Create Release
      if: contains(github.ref, 'release')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      if: contains(github.ref, 'release')
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      if: contains(github.ref, 'release')
      uses: actions/upload-artifact@v4
      with:
        name: release_url
        path: release_url.txt

  windows_5_15_2_msc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: jurplel/install-qt-action@v4
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.15.2'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_msvc2019_64'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: ''
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        #cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
        #tools: 'tools_ifw,4.4.1-0-202206210642,qt.tools.ifw.44'
        tools: 'tools_ifw'
    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose
    - name: Install Qt and compile
      run: |
        cd 
        dir
        d:
        dir
        cl
        cd src
        dir
        qmake -r cliphist2.pro
        dir
        nmake
        dir
        dir release
        dir debug
        cd release
        dir
        mkdir ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy cliphist2.exe ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_256x256.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.png ..\..\dist\packages\de.mneuroth.cliphist2\data
        cd ..\..\dist\packages\de.mneuroth.cliphist2\data
        windeployqt --release --no-system-d3d-compiler cliphist2.exe
        dir
        cd ..\..\..\..\dist
        binarycreator --offline-only -c config\config.xml -p packages Cliphist2_Installer_win_qt5.15.2.exe
        dir
        
  windows_6_7_3_msc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: jurplel/install-qt-action@v4
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '6.7.3'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_msvc2019_64'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qt5compat'
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        #cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
        #mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
        #setup-python: 'true'
        #tools-only: 'false'
        #aqtversion: '==0.10.0'
        #py7zrversion: '==0.11.0'
        #extra: '--external 7z'
        #tools: 'tools_ifw,4.4.1-0-202206210642,qt.tools.ifw.44'
        tools: 'tools_ifw'
    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose
    - name: Install Qt and compile
      run: |
        cd 
        dir
        d:
        dir
        cl
        cd src
        dir
        qmake -r cliphist2.pro
        dir
        nmake
        dir
        dir release
        dir debug
        cd release
        dir
        mkdir ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy cliphist2.exe ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_256x256.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.png ..\..\dist\packages\de.mneuroth.cliphist2\data
        cd ..\..\dist\packages\de.mneuroth.cliphist2\data
        windeployqt --release --no-system-d3d-compiler cliphist2.exe
        dir
        cd ..\..\..\..\dist
        binarycreator --offline-only  -c config\config.xml -p packages Cliphist2_Installer_win_qt6.7.3.exe
        dir

    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: dist\Cliphist2_Installer_win_qt6.7.3.exe
        asset_name: Cliphist2_Installer_win_qt6.7.3.exe
        asset_content_type: application/exe


  windows_6_9_2_msc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: jurplel/install-qt-action@v4
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '6.9.2'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_msvc2022_64'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qt5compat'
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        #cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
        #mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
        #setup-python: 'true'
        #tools-only: 'false'
        #aqtversion: '==0.10.0'
        #py7zrversion: '==0.11.0'
        #extra: '--external 7z'
        #tools: 'tools_ifw,4.4.1-0-202206210642,qt.tools.ifw.44'
        tools: 'tools_ifw'
    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose
    - name: Install Qt and compile
      run: |
        cd 
        dir
        d:
        dir
        cl
        cd src
        dir
        qmake -r cliphist2.pro
        dir
        nmake
        dir
        dir release
        dir debug
        cd release
        dir
        mkdir ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy cliphist2.exe ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_256x256.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.ico ..\..\dist\packages\de.mneuroth.cliphist2\data
        copy ..\cliphist2_512x512.png ..\..\dist\packages\de.mneuroth.cliphist2\data
        cd ..\..\dist\packages\de.mneuroth.cliphist2\data
        windeployqt --release --no-system-d3d-compiler cliphist2.exe
        dir
        cd ..\..\..\..\dist
        binarycreator --offline-only  -c config\config.xml -p packages Cliphist2_Installer_win_qt6.9.2.exe
        dir
        
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: dist\Cliphist2_Installer_win_qt6.9.2.exe
        asset_name: Cliphist2_Installer_win_qt6.9.2.exe
        asset_content_type: application/exe

